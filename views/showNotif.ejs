<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Manager Dashboard</title>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons+Outlined" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">

    <!-- Custom CSS -->
   <style>
    body {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    background-color: #FFFFFF;
    color: #666666;
    font-family: "Montstreet" sans-serif;
  }

  .material-icons-outlined {
    vertical-align: middle;
    line-height: 1px;
    position: relative;
  }

  .text-primery {
    color: #666666;
  }
  .text-blue{
    color:#dfc7e0;
  }
  .text-red{
    color: #a68d9f;
  }
  .text-green{
    color: #9da090;
  }
  .text-orange{
    color: #f5b74f;
  }
  .font-weight-bold{
    font-weight: 600;
  }
  
  
  .grid-container {
    display: grid;
    grid-template-columns: 260px 1fr 1fr 1fr;
    grid-template-rows: 0.2fr 3fr;
    grid-template-areas:
      "sidebar header header header"
      "sidebar main main main";
    height: 100vh;
  }
  
  
  /* ---------- HEADER ---------- */
  
  .header {
    grid-area: header;
    height: 70px;
    background-color: #ebebeb;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 30px 0 30px;
    box-shadow: 0 6px 7px -4px rgba(172, 157, 169, 0.5);
  }

  .menu-icon {
  display: none;
}
  
  
  /* ---------- SIDEBAR ---------- */
  
  #sidebar {
    grid-area: sidebar;
    height: 100%;
    background-color: <%= store.color %>;
    color: #E9E5EE;
    overflow-y: auto;
    -webkit-transition: all 0.5;
    transition: all 0.5;
  }

  .sidebar-title {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px 20px 20px 20px;
  margin-bottom: 30px;
}

.sidebar-title > span {
  display: none;
}

.sidebar-brand {
  margin-top: 15px;
  font-size: 20px;
  font-weight: 700;
}

.sidebar-list {
  padding: 0;
  margin-top: 15px;
  list-style-type: none;
}

.sidebar-list-item {
  padding: 20px 20px 20px 20px;
}

.sidebar-list-item:hover {
  background-color: rgba(255, 255, 255, 0.2);
  cursor: pointer;
}

.sidebar-list-item > a {
  text-decoration: none;
  color: #FFFFFF;
}

.sidebar-responsive {
  display: inline !important;
  position: absolute;
  z-index: 12 !important;
}

.main-title {
  display: flex;
  justify-content: space-between;
}

.main-title > p {
  font-size: 20px;
}

.main-cards {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  gap: 20px;
  margin: 20px 0;
}

.card {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  padding: 25px;
  background-color: #ffffff;
  box-sizing: border-box;
  border: 1px solid #d2d2d3;
  border-radius: 5px;
  box-shadow: 0 6px 7px -4px rgba(0, 0, 0, 0.2);
}

.card:first-child {
  border-left: 7px solid #666666;
}

.card:nth-child(2) {
  border-left: 7px solid #dfc7e0;
}

.card:nth-child(3) {
  border-left: 7px solid #a68d9f;
}

.card:nth-child(4) {
  border-left: 7px solid #f5b74f;
}

.card > span {
  font-size: 20px;
  font-weight: 600;
}

.card-inner {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.card-inner > p {
  font-size: 18px;
}

.card-inner > span {
  font-size: 35px;
}

.h_line{
        border-bottom: 0.2px ridge #ffff;
        width: 300px;
        margin: 30px 0px 5px -20px;
       }


/* ---------- SCROLLBARS ---------- */

::-webkit-scrollbar {
  width: 5px;
  height: 6px;
}

::-webkit-scrollbar-track {
  box-shadow: inset 0 0 5px #a5aaad;
  border-radius: 10px;
}

::-webkit-scrollbar-thumb {
  background-color: <%= store.color %>;
  border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
  background-color: #a5aaad;
}


/* ---------- MEDIA QUERIES ---------- */


/* Medium <= 992px */
@media screen and (max-width: 992px) {
  .grid-container {
    grid-template-columns: 1fr;
    grid-template-rows: 0.2fr 3fr;
    grid-template-areas:
      "header"
      "main";
  }

  #sidebar {
    display: none;
  }

  .menu-icon {
    display: inline;
  }

  .sidebar-title > span {
    display: inline;
  }
}

/* Small <= 768px */
@media screen and (max-width: 768px) {
  .main-cards {
    grid-template-columns: 1fr;
    gap: 10px;
    margin-bottom: 0;
  }

  
}

/* Extra Small <= 576px */
@media screen and (max-width: 576px) {
  .header-left {
    display: none;
  }
}
  /* ---------- MAIN ---------- */
  
  .main-container {
    grid-area: main;
    overflow-y: auto;
    padding: 20px 20px;
  }

  .main-container {
    grid-area: main;
    overflow-y: auto;
    padding: 20px 20px;
    margin-left: 3%;
  }

  .dropdown{
    float: right;
    margin-top: 20px;
    margin-right: 130px;
  }

  .tbl {
    position: absolute;
    width: 70%;
    top: 23%;
    margin-left: 23%;
}

#name {
  margin-top: -35px;
  margin-left: 60px;
  font-size: 20px;
  font-weight: 700;
}


.main-title {
  display: flex;
  justify-content: space-between;
}

  .main-title > p {
    font-size: 20px;
  }
  .reply {
    background-color: rgba(0, 0, 0, 0.0);
    border: none;
  }
  .send-btn {
    border-radius: 10px;
  }
  .center {
  margin-left: 40%;
    top: 25%;
    position: absolute;
    font-size: large;
}
.notifications-count {
  position: absolute;
  display: flex;
  top: 11px;
  right: 50px;
  color: rgb(151, 6, 6);
  border-radius: 50%;
  width: 20px;
  height: 20px;
  justify-content: center;
  align-items: center;
  font-size: 12px;
  font-weight: bold;
}

.notification-item.unread {
  color: black;
  font-style: bold;
}


   </style>
  </head>
  <body>
    <div class="grid-container">

      <!-- Header -->
      <header class="header">
        <div class="menu-icon" onclick="openSidebar()">
            <span class="material-icons-outlined">menu</span>
          </div>
          <div class="header-left">
            <span class="material-icons-outlined">search</span>
          </div>
          <div class="header-right">
              <span class="material-icons-outlined"id='notifications-icon' >notifications</span>
              <p class="notifications-count" id="noti_number"></p>
             <span class="material-icons-outlined">account_circle</span>
          </div>
      </header>
      <!-- End Header -->

      <!-- Sidebar -->
      <aside id="sidebar">
      <!-- End Sidebar -->
      <div class="sidebar-title">
      <div class="sidebar-brand">
         <img src="<%= store.logo %>"height="55" width="55">
          <h2 id="name"><%= store.name %></h2>
        </span>
        <div class="h_line"></div>

        </div>
        <span class="material-icons-outlined" onclick="closeSidebar()">close</span>
      </div>
      <ul class="sidebar-list">
          <li class="sidebar-list-item">
              <a href="/dashboard" target="_self">
                  <span class="material-icons-outlined">dashboard</span> Dashboard
              </a>
          </li>
          <li class="sidebar-list-item">
              <a href="/Loyality" target="_self">
                  <span class="material-icons-outlined">
                      card_membership</span> Loyality
              </a>
          </li>

          <li class="sidebar-list-item">
              <a href="/campaigns" target="_self">
                  <span class="material-icons-outlined">campaign</span> Campaigns
              </a>
          </li>

          <li class="sidebar-list-item">
              <a href="/queseval" target="_self">
                  <span class="material-icons-outlined">contact_support</span> Questions and Evaluations
              </a>
          </li>

          <li class="sidebar-list-item">
              <a href="/storeset" target="_self">
                  <span class="material-icons-outlined">settings</span>  Settings
              </a>
          </li>
      </ul>
  </aside>

   <!-- Main -->
   <main class="main-container">
    <div class="main-title">
      <p class="font-weight-bold">Notifications</p>
    </div>
    <div id="notifications-list" class="notifications-list">
      <!-- notifications will be added here -->
    </div>
  
      
    </div>
  
   <script>
   function updateNotificationsCount() {
  // Fetch the notifications from the server
  fetch('http://localhost:8080/notifications')
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        const notifications = data.notifications;
        const unreadNotifications = notifications.filter(notification => !notification.read);
        const unreadCount = unreadNotifications.length;

        // Display the count of unread notifications to the user
        const notificationsCount = document.getElementById('noti_number');
        notificationsCount.textContent = unreadCount;
        notificationsCount.style.display = unreadCount > 0 ? 'block' : 'none';

        // Store the count in the browser's local storage
        localStorage.setItem('unreadNotificationsCount', unreadCount);
      } else {
        console.error('Failed to fetch notifications:', data.error);
      }
    })
    .catch(error => console.error('Error fetching notifications:', error));
}

// Call the updateNotificationsCount function once on page load
updateNotificationsCount();

// Update the count of unread notifications every 30 seconds
setInterval(updateNotificationsCount, 30000);

// Retrieve the count from the browser's local storage on all pages
const unreadNotificationsCount = localStorage.getItem('unreadNotificationsCount');
if (unreadNotificationsCount) {
  const notificationsCount = document.getElementById('noti_number');
  notificationsCount.textContent = unreadNotificationsCount;
  notificationsCount.style.display = unreadNotificationsCount > 0 ? 'block' : 'none';
}

// Next, modify the client-side code to use the count of unread notifications
fetch('http://localhost:8080/notifications')
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      const notifications = data.notifications;
      const unreadCount = parseInt(unreadNotificationsCount); // Parse the count from local storage

      // Display the count of unread notifications to the user
      const notificationsCount = document.getElementById('noti_number');
      notificationsCount.textContent = unreadCount;
      notificationsCount.style.display = unreadCount > 0 ? 'block' : 'none';

      // Display the notifications in a list
      const notificationsList = document.getElementById('notifications-list');
      notifications.forEach(notification => {
        const listItem = document.createElement('div');
        listItem.className = 'notification-item';
        let content;
        if (notification.type === 'question') {
          content = `Received new question: ${notification.content.question}`;
          listItem.onclick = function() {
            window.location.href = '/queseval';
          }

        } else if (notification.type === 'redeem') {
          content = `User ${notification.content.userPhone} Redeemed: ${notification.content.points} points`;
          listItem.onclick = function() {
            window.location.href = '/queseval';
          }
        } else if (notification.type === 'rating') {
          content = `User ${notification.content.phone} Rating for: ${notification.content.rating} rating, and review: ${notification.content.comment}`;  
        } else {
          content = notification.message;
        }
        listItem.innerHTML = `
          <div class="notification-content">
            <p class="notification-text">${content}</p>
          </div>
        `;

        // Add a CSS class to the list item element for each unread notification
        if (!notification.read) {
          listItem.classList.add('unread');

          listItem.addEventListener('click', () => {
            const notificationId = notification._id;

            // Send an AJAX request to update the notification's read field
            const xhr = new XMLHttpRequest();
            xhr.open('PUT', `/notifications/${notificationId}/read`);
            xhr.send();

            // Update the notification in the local array and on the page
            notification.read = true;
            listItem.classList.remove('unread');

            // Update the count of unread notifications
            const notificationsCount = document.getElementById('noti_number');
            notificationsCount.textContent = parseInt(notificationsCount.textContent) - 1;
            notificationsCount.style.display = notificationsCount.textContent > 0 ? 'block' : 'none';
            localStorage.setItem('unreadNotificationsCount', notificationsCount.textContent);
          });
        }

        notificationsList.appendChild(listItem);
      });

    } else {
      console.error('Failed to fetch notifications:', data.error);
    }
  })
  .catch(error => console.error('Error fetching notifications:', error));


   </script>



    
 




   
</div>
</main>
  
  
 </body>
</html>